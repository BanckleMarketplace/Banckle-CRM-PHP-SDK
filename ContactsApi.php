<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class ContactsApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  /**
	 * getcontacts
	 * Get all contacts
   * @return ContactsResponse
	 */

   public function getcontacts() {

  		//parse inputs
  		$resourcePath = "/contacts";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * getcontactsid
	 * Get contact by id
   * id, string: Contact id (required)
   * @return ContactsResponse
	 */

   public function getcontactsid($id) {

  		//parse inputs
  		$resourcePath = "/contacts/{id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($id != null) {
  			$resourcePath = str_replace("{" . "id" . "}",
  			                            $this->apiClient->toPathValue($id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * deletecontactsid
	 * Delete contact by id
   * id, string: Contact id (required)
   * body, DeleteContactByIdDto:  (optional)
   * @return ContactsResponse
	 */

   public function deletecontactsid($id, $body=null) {

  		//parse inputs
  		$resourcePath = "/contacts/{id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($id != null) {
  			$resourcePath = str_replace("{" . "id" . "}",
  			                            $this->apiClient->toPathValue($id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * getcontactsbynamename
	 * Get contact by name
   * name, string: Contact Name (required)
   * @return ContactsResponse
	 */

   public function getcontactsbynamename($name) {

  		//parse inputs
  		$resourcePath = "/contacts/byname/{name}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($name != null) {
  			$resourcePath = str_replace("{" . "name" . "}",
  			                            $this->apiClient->toPathValue($name), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * postcontactscompany
	 * Create a company
   * body, string: Company name (required)
   * body, string: Company description (optional)
   * body, string: Company industry (optional)
   * body, string: Company established date (optional)
   * @return ContactsResponse
	 */

   public function postcontactscompany($body, $body=null, $body=null, $body=null) {

  		//parse inputs
  		$resourcePath = "/contacts/company";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * getcontactscompanycompanyName
	 * Get company by name
   * companyName, string: Company name (required)
   * @return ContactsResponse
	 */

   public function getcontactscompanycompanyName($companyName) {

  		//parse inputs
  		$resourcePath = "/contacts/company/{companyName}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($companyName != null) {
  			$resourcePath = str_replace("{" . "companyName" . "}",
  			                            $this->apiClient->toPathValue($companyName), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * getcontactscompanycompanyNameemployees
	 * Get employees by company name
   * companyName, string: Company name (required)
   * @return ContactsResponse
	 */

   public function getcontactscompanycompanyNameemployees($companyName) {

  		//parse inputs
  		$resourcePath = "/contacts/company/{companyName}/employees";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($companyName != null) {
  			$resourcePath = str_replace("{" . "companyName" . "}",
  			                            $this->apiClient->toPathValue($companyName), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * postcontactscompanycompanyNameemployees
	 * Create an employee
   * companyName, string: Company name (required)
   * body, string: Person first name (optional)
   * body, string: Person last name (required)
   * body, string: Person title (optional)
   * body, string: Person job position (optional)
   * body, string: Person description (optional)
   * body, string: Person birthday (optional)
   * body, string: Contact skype name (optional)
   * @return ContactsResponse
	 */

   public function postcontactscompanycompanyNameemployees($companyName, $body=null, $body, $body=null, $body=null, $body=null, $body=null, $body=null) {

  		//parse inputs
  		$resourcePath = "/contacts/company/{companyName}/employees";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($companyName != null) {
  			$resourcePath = str_replace("{" . "companyName" . "}",
  			                            $this->apiClient->toPathValue($companyName), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * putcontactscompanyid
	 * Update a company
   * id, string: Company id (required)
   * body, string: Company name (required)
   * body, string: Company description (optional)
   * body, string: Company industry (optional)
   * body, string: Company established date (optional)
   * @return ContactsResponse
	 */

   public function putcontactscompanyid($id, $body, $body=null, $body=null, $body=null) {

  		//parse inputs
  		$resourcePath = "/contacts/company/{id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($id != null) {
  			$resourcePath = str_replace("{" . "id" . "}",
  			                            $this->apiClient->toPathValue($id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * postcontactsperson
	 * Create a person
   * body, string: Person first name (optional)
   * body, string: Person last name (required)
   * body, string: Person title (optional)
   * body, string: Person job position (optional)
   * body, string: Company id in which the person works (optional)
   * body, string: Person description (optional)
   * body, string: Person birthday (optional)
   * body, string: Contact skype name (optional)
   * @return ContactsResponse
	 */

   public function postcontactsperson($body=null, $body, $body=null, $body=null, $body=null, $body=null, $body=null, $body=null) {

  		//parse inputs
  		$resourcePath = "/contacts/person";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * putcontactspersonid
	 * Update a person
   * id, string: Person id (required)
   * body, string: Person first name (optional)
   * body, string: Person last name (required)
   * body, string: Person title (optional)
   * body, string: Person job position (optional)
   * body, string: Company id in which the person works (optional)
   * body, string: Person description (optional)
   * body, string: Person birthday (optional)
   * body, string: Contact skype name (optional)
   * @return ContactsResponse
	 */

   public function putcontactspersonid($id, $body=null, $body, $body=null, $body=null, $body=null, $body=null, $body=null, $body=null) {

  		//parse inputs
  		$resourcePath = "/contacts/person/{id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($id != null) {
  			$resourcePath = str_replace("{" . "id" . "}",
  			                            $this->apiClient->toPathValue($id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * getcontactspersonpersonName
	 * Get person by name
   * personName, string: Person name (required)
   * @return ContactsResponse
	 */

   public function getcontactspersonpersonName($personName) {

  		//parse inputs
  		$resourcePath = "/contacts/person/{personName}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($personName != null) {
  			$resourcePath = str_replace("{" . "personName" . "}",
  			                            $this->apiClient->toPathValue($personName), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * getcontactspersonpersonNamecolleagues
	 * Get colleagues by person name
   * personName, string: Person name (required)
   * @return ContactsResponse
	 */

   public function getcontactspersonpersonNamecolleagues($personName) {

  		//parse inputs
  		$resourcePath = "/contacts/person/{personName}/colleagues";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($personName != null) {
  			$resourcePath = str_replace("{" . "personName" . "}",
  			                            $this->apiClient->toPathValue($personName), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  /**
	 * postcontactspersonpersonNamecolleagues
	 * Create a colleague
   * personName, string: Person name (required)
   * body, string: Person first name (optional)
   * body, string: Person last name (required)
   * body, string: Person title (optional)
   * body, string: Person job position (optional)
   * body, string: Person description (optional)
   * body, string: Person birthday (optional)
   * body, string: Contact skype name (optional)
   * @return ContactsResponse
	 */

   public function postcontactspersonpersonNamecolleagues($personName, $body=null, $body, $body=null, $body=null, $body=null, $body=null, $body=null) {

  		//parse inputs
  		$resourcePath = "/contacts/person/{personName}/colleagues";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($personName != null) {
  			$resourcePath = str_replace("{" . "personName" . "}",
  			                            $this->apiClient->toPathValue($personName), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ContactsResponse');
  		return $responseObject;

      }
  
}

