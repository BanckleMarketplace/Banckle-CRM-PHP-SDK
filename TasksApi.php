<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class TasksApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  /**
	 * gettasks
	 * Gets all tasks
   * @return TasksResponse
	 */

   public function gettasks() {

  		//parse inputs
  		$resourcePath = "/tasks";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'TasksResponse');
  		return $responseObject;

      }
  /**
	 * posttasks
	 * Create a Task
   * body, string: Task name (required)
   * body, string: Task description (optional)
   * body, string: Task startDate (optional)
   * @return TasksResponse
	 */

   public function posttasks($body, $body=null, $body=null) {

  		//parse inputs
  		$resourcePath = "/tasks";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'TasksResponse');
  		return $responseObject;

      }
  /**
	 * puttasks
	 * Update Task
   * id, string: Task id (required)
   * body, string: Task name (required)
   * body, string: Task description (optional)
   * body, string: Task startDate (optional)
   * body, string: Task completed (required)
   * @return TasksResponse
	 */

   public function puttasks($id, $body, $body=null, $body=null, $body) {

  		//parse inputs
  		$resourcePath = "/tasks";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($id != null) {
  			$resourcePath = str_replace("{" . "id" . "}",
  			                            $this->apiClient->toPathValue($id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'TasksResponse');
  		return $responseObject;

      }
  /**
	 * gettasksid
	 * Get task by id
   * id, string: Task id (required)
   * @return TasksResponse
	 */

   public function gettasksid($id) {

  		//parse inputs
  		$resourcePath = "/tasks/{id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($id != null) {
  			$resourcePath = str_replace("{" . "id" . "}",
  			                            $this->apiClient->toPathValue($id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'TasksResponse');
  		return $responseObject;

      }
  /**
	 * deletetasksid
	 * Delete Task by id
   * id, string: Task id (required)
   * body, DeleteTaskByIdDto:  (optional)
   * @return TasksResponse
	 */

   public function deletetasksid($id, $body=null) {

  		//parse inputs
  		$resourcePath = "/tasks/{id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($id != null) {
  			$resourcePath = str_replace("{" . "id" . "}",
  			                            $this->apiClient->toPathValue($id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'TasksResponse');
  		return $responseObject;

      }
  
}

